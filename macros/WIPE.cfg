[gcode_macro WIPE]
variable_purge_x: 130
variable_start_x: 115
variable_end_x: 72
variable_z: 0.2
variable_lift_z: 3
variable_wipe_accel: 4000
variable_wipe_speed: 15000
variable_wipe_count: 3
variable_parking_distance: 15 ; used only when purge or standalone is set, otherwise no extruder movement is done
gcode:
    {% set ret = params.RETURN|default(0)|int %}

    {% set initial_x = printer.toolhead.position.x %}
    {% set initial_z = printer.toolhead.position.z %}
    {% set initial_max_accel = printer.toolhead.max_accel %}
    {% set initial_fan_speed = (255 * printer.fan.speed)|int %}
    {% set initial_pa = printer.extruder.pressure_advance %}

    SAVE_GCODE_STATE NAME=wipe

    ; Move to position
    _WIPE_POSITION

    ; Reset
    M220 S100
    M221 S100
    SET_PRESSURE_ADVANCE ADVANCE=0

    STATUS_CLEANING

    ; Wait to reach target temperature
    M109 S{printer.extruder.target}

    ; Enable fan to blow away scraps
    M106 S255

    ; Do wipe
    _WIPE_NOZZLE {rawparams}

    ; Lift back to original z
    G90
    G0 X{initial_x} Z{initial_z} F{60 * printer.toolhead.max_velocity}

    ; Restore
    M106 S{initial_fan_speed}
    SET_VELOCITY_LIMIT ACCEL={initial_max_accel}
    SET_PRESSURE_ADVANCE ADVANCE={initial_pa}
    RESTORE_GCODE_STATE NAME=wipe MOVE={ret} MOVE_SPEED={printer.toolhead.max_velocity}

    ; Status
    {% if printer.idle_timeout.state != "Printing" %}
        STATUS_READY
    {% endif %}

[gcode_macro WIPE_STANDALONE]
gcode:
    WIPE STANDALONE=1 {rawparams}

[gcode_macro _WIPE_NOZZLE]
description: Internal wipe logic without state management, must be already in position
gcode:
    {% set standalone = params.STANDALONE|default(0)|int %}
    {% set purge = params.PURGE|default(0)|float %}
    {% set wipe_count = params.COUNT|default(printer['gcode_macro WIPE']['wipe_count'])|int %}
    {% set wipe_speed = params.SPEED|default(printer['gcode_macro WIPE']['wipe_speed'])|int %}
    {% set parking_distance = params.PARKING_DISTANCE|default(printer['gcode_macro WIPE']['parking_distance'])|float %}

    {% set y = printer.toolhead.axis_maximum.y %}
    {% set purge_x = printer['gcode_macro WIPE']['purge_x']|int %}
    {% set start_x = printer['gcode_macro WIPE']['start_x']|int %}
    {% set end_x = printer['gcode_macro WIPE']['end_x']|int %}
    {% set z = printer['gcode_macro WIPE']['z']|float %}
    {% set wipe_accel = printer['gcode_macro WIPE']['wipe_accel']|int %}

    ; Absolute positioning
    G90
    M82
    G92 E0

    ; Lower nozzle
    G0 Z{z} F{60 * printer.toolhead.max_velocity}

    ; Perform purge
    {% if purge > 0 %}
        M118 Purging {purge} mm
        G1 E{purge} F600
        G92 E0
    {% endif %}

    ; Form tip
    {% if standalone > 0 %}
        ; Form tip
        M118 Forming tip
        _MMU_FORM_TIP_STANDALONE SS_RAMMING=0 FINAL_EJECT=0
        # TODO test whether _MMU_FORM_TIP_STANDALONE now properly reports parking position
        # G1 E{-parking_distance} F3000
        ; Note: this is custom variable
        {% set actual_parking_distance = printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['actual_parking_distance']|float %}
        G92 E{actual_parking_distance}
        G1 E{-parking_distance} F3000
    {% elif purge > 0 %}
        ; Retract to parking distance
        G92 E0
        G1 E{-parking_distance} F3000
    {% endif %}

    ; Wipe sequence
    M118 Wiping nozzle
    SET_VELOCITY_LIMIT ACCEL={wipe_accel}
    G90
    G0 F{wipe_speed}
    G0 X{purge_x}
    {% for i in range(wipe_count) %}
        ; Alternate y
        G0 Y{(y-0.4) if (i%2) else y}
        G0 X{end_x}
        G0 X{start_x}
    {% endfor %}

[gcode_macro _WIPE_POSITION]
gcode:
    {% set start_y = printer.toolhead.axis_maximum.y|float %}
    {% set start_x = printer['gcode_macro WIPE']['start_x']|int %}
    {% set purge_x = printer['gcode_macro WIPE']['purge_x']|int %}
    {% set lift_z = printer['gcode_macro WIPE']['lift_z']|float %}
    {% set current_x = printer.toolhead.position.x|float %}
    {% set current_y = printer.toolhead.position.y|float %}
    {% set max_accel = printer.toolhead.max_accel %}

    {% set min_x = [start_x, purge_x] | min %}
    {% set max_x = [start_x, purge_x] | max %}
    {% set random_x = range(10*start_x, 10*purge_x) | random / 10 %}

    {% if current_x < min_x or current_x > max_x or current_y != start_y %}
        SAVE_GCODE_STATE NAME=wipe_position

        ; Fast movements
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
        G0 F{60 * printer.toolhead.max_velocity}

        ; Lift
        G91
        G0 Z{lift_z}

        ; Move to position
        G90
        G0 X{random_x} Y{start_y}

        ; Move back down
        G91
        G0 Z-{lift_z}

        ; Restore
        SET_VELOCITY_LIMIT ACCEL={max_accel}
        RESTORE_GCODE_STATE NAME=wipe_position
    {% endif %}

[gcode_macro _WIPE_IF_IN_POSITION]
gcode:
    {% set start_y = printer.toolhead.axis_maximum.y|float %}
    {% set start_x = printer['gcode_macro WIPE']['start_x']|int %}
    {% set purge_x = printer['gcode_macro WIPE']['purge_x']|int %}
    {% set min_x = [start_x, purge_x] | min %}
    {% set max_x = [start_x, purge_x] | max %}
    {% set current_x = printer.toolhead.position.x|float %}
    {% set current_y = printer.toolhead.position.y|float %}

    ;M118 current_x={current_x} current_y={current_y} purge_x={purge_x} start_y={start_y}
    {% if printer.toolhead.homed_axes == "xyz" and current_x >= min_x and current_x <= max_x and current_y == start_y %}
    WIPE {rawparams}
    {% endif %}
