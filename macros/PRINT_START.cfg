[gcode_macro PRINT_START]
description: Called when starting print
variable_exhaust_fan_speed: 0.3
gcode:
  {% set bed = params.BED|int %}
  {% set extruder = params.EXTRUDER|int %}
  {% set tool = params.TOOL|default(-1)|int %}
  {% set mesh = params.MESH|default(1)|int %}
  {% set area_start = params.AREA_START|default("0,0") %}
  {% set area_end = params.AREA_END|default("0,0") %}

  {% set th = printer.toolhead %}

  ; make sure pre-init is completed (includes heating up)
  PRINT_PRE_START BED={bed} EXTRUDER={extruder}

  ; home all axes and level gantry
  G32

  ; select tool
  {% if tool >= 0 %}
    _WIPE_NOZZLE_POSITION

    ; Change tool only if needed, otherwise wipe nozzle as usual
    {% set mmu_filament = printer.mmu.filament|string %}
    {% set mmu_tool = printer.mmu.tool|int %}

    {% if mmu_tool != tool or mmu_filament != 'Loaded' %}
      MMU_CHANGE_TOOL_STANDALONE TOOL={tool}
    {% else %}
      WIPE_NOZZLE STANDALONE=1 PURGE=5
    {% endif %}

  {% else %}
    WIPE_NOZZLE STANDALONE=1 PURGE=5
  {% endif %}

  ; home z again with clean nozzle
  G0 X{th.axis_maximum.x-5} Y{th.axis_maximum.y-5} F20000
  G28

  ; bed mesh
  {% if mesh > 0 %}
  STATUS_MESHING
  BED_MESH_CALIBRATE PRINT_MIN={area_start} PRINT_MAX={area_end}
  {% endif %}

  ; prime
  STATUS_PRINTING
  PRIME EXTRA={printer['gcode_macro WIPE_NOZZLE']['standalone_retract']|float}

  ; print
  M118 Printing
  M117

[gcode_macro PRINT_PRE_START]
gcode:
  {% set extruder = params.EXTRUDER|int %}
  {% set bed = params.BED|int %}

  ; cancel all auto-off timers
  UPDATE_DELAYED_GCODE ID=exhaust_fan_off DURATION=0
  UPDATE_DELAYED_GCODE ID=caselight_off DURATION=0

  SET_FAN_SPEED FAN=exhaust_fan SPEED={printer['gcode_macro PRINT_START']['exhaust_fan_speed']|float}

  ; finish heating
  STATUS_HEATING
  M190 S{bed} ; wait for bed temp to stabilize
  M109 S{extruder} ; wait for extruder temp to stabilize

[gcode_macro PRINT_PREPARE_MMU]
gcode:
  ; normalize parameters
  {% set tool = params.TOOL|int %}
  {% set tools_used = params.TOOLS_USED.split(',')|map('int', -1, true)|reject('equalto', -1)|sort|unique %}

  STATUS_BUSY

  ; home if needed
  {% if not printer.mmu.is_homed %}
    MMU_HOME TOOL={tool}
  {% endif %}
  MMU_SELECT TOOL={tool}

  ; perform check
  MMU_CHECK_GATES TOOLS={tools_used|join(',')}
